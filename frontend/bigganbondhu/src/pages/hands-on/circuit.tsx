import { useState } from "react";
import { useNavigate } from "react-router-dom";

import P5CircuitSimulator from "@/components/physics/circuit/P5CircuitSimulator";
import DefaultLayout from "@/layouts/default";

const MODES = [
  { key: "series" as "series", label: "‡¶∏‡¶ø‡¶∞‡¶ø‡¶ú", icon: "üîó" },
  { key: "parallel" as "parallel", label: "‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶≤‡¶æ‡¶≤", icon: "üîÄ" },
  { key: "free" as "free", label: "‡¶´‡ßç‡¶∞‡¶ø", icon: "üÜì" },
  { key: "challenge" as "challenge", label: "‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú", icon: "üèÜ" },
];

const CHALLENGES = [
  {
    key: "series20",
    label: "‡¶∏‡¶ø‡¶∞‡¶ø‡¶ú: ‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶∏ ‡ß®‡ß¶Œ©",
    challenge: {
      mode: "series" as "series" | "parallel" | "free",
      totalResistance: 20,
      description: "‡¶∏‡¶ø‡¶∞‡¶ø‡¶ú ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó‡ßá ‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶∏ ‡ß®‡ß¶Œ© ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    },
  },
  {
    key: "parallel5",
    label: "‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶≤‡¶æ‡¶≤: ‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶∏ ‡ß´Œ©",
    challenge: {
      mode: "parallel" as "series" | "parallel" | "free",
      totalResistance: 5,
      description: "‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶≤‡¶æ‡¶≤ ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó‡ßá ‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶∏ ‡ß´Œ© ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    },
  },
  {
    key: "led-circuit",
    label: "LED ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü",
    challenge: {
      mode: "series" as "series" | "parallel" | "free",
      totalResistance: 220,
      description:
        "‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡¶ø, ‡¶è‡¶ï‡¶ü‡¶ø LED, ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡ß®‡ß®‡ß¶Œ© ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶∞ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    },
  },
  {
    key: "complex-parallel",
    label: "‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶≤‡¶æ‡¶≤",
    challenge: {
      mode: "parallel" as "series" | "parallel" | "free",
      totalResistance: 3.33,
      description:
        "‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶≤‡¶æ‡¶≤ ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó‡ßá ‡ßß‡ß¶Œ©, ‡ßß‡ß¶Œ©, ‡¶ì ‡ßß‡ß¶Œ© ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶∞ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ (‡ß©.‡ß©‡ß©Œ© ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§)",
    },
  },
];

export default function CircuitDesignPage() {
  const [mode, setMode] = useState<
    "series" | "parallel" | "free" | "challenge"
  >("free");
  const [showCurrent, setShowCurrent] = useState(true);
  const [resetKey, setResetKey] = useState(0);
  const [selectedChallenge, setSelectedChallenge] = useState(
    CHALLENGES[0].challenge,
  );
  const [voltage, setVoltage] = useState(6);
  const [resistance, setResistance] = useState(10);
  const [challengeResult, setChallengeResult] = useState<
    "success" | "error" | "warning" | null
  >(null);
  const navigate = useNavigate();

  const handleReset = () => {
    setResetKey((k) => k + 1);
  };

  // Save/load/export logic
  const handleSave = () => {
    try {
      const canvasState = document.querySelector("canvas")?.toDataURL();

      localStorage.setItem(
        "circuit-sim-state",
        JSON.stringify({
          key: resetKey,
          mode,
          voltage,
          resistance,
          showCurrent,
          timestamp: Date.now(),
          canvasState,
        }),
      );
      alert("‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
    } catch (err) {
      alert("‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
      console.error(err);
    }
  };

  const handleLoad = () => {
    const data = localStorage.getItem("circuit-sim-state");

    if (data) {
      try {
        const savedState = JSON.parse(data);

        setResetKey(savedState.key || 0);
        setMode(savedState.mode || "free");
        setVoltage(savedState.voltage || 6);
        setResistance(savedState.resistance || 10);
        setShowCurrent(
          savedState.showCurrent !== undefined ? savedState.showCurrent : true,
        );

        alert("‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
      } catch (err) {
        alert("‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
        console.error(err);
      }
    } else {
      alert("‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§");
    }
  };

  const handleExport = () => {
    const el = document.querySelector("canvas");

    if (el && el instanceof HTMLCanvasElement) {
      try {
        const url = el.toDataURL("image/png");
        const a = document.createElement("a");

        a.href = url;
        a.download = `circuit-design-${Date.now()}.png`;
        a.click();
      } catch (err) {
        alert("‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡¶Ø‡¶º‡•§");
        console.error(err);
      }
    } else {
      alert("‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡¶Ø‡¶º‡•§ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶≠‡¶æ‡¶∏ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§");
    }
  };

  const handleChallengeResult = (result: "success" | "error" | "warning") => {
    setChallengeResult(result);

    // Show a celebration animation for success
    if (result === "success") {
      // Could add confetti animation here
      setTimeout(() => {
        setChallengeResult(null);
      }, 3000);
    }
  };

  return (
    <DefaultLayout>
      <div className="max-w-5xl mx-auto py-8 px-2 font-sans">
        <button
          className="mb-6 px-4 py-2 bg-blue-700 text-white rounded hover:bg-blue-800 transition"
          onClick={() => navigate("/hands-on")}
        >
          ‚Üê ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶∏-‡¶Ö‡¶® ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®
        </button>
        <h1 className="text-4xl font-extrabold mb-2 text-center tracking-tight">
          ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®
        </h1>
        <p className="text-center text-lg text-gray-500 dark:text-gray-300 mb-6 font-medium">
          ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶∞‡¶ø‡¶∏‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶ì‡¶π‡¶Æ‡ßá‡¶∞ ‡¶∏‡ßÇ‡¶§‡ßç‡¶∞, ‡¶∏‡¶ø‡¶∞‡¶ø‡¶ú ‡¶ì ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶≤‡¶æ‡¶≤ ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó
          ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶®
        </p>

        {/* Toolbar with new design */}
        <div className="bg-white dark:bg-gray-900 rounded-xl shadow-lg p-3 sm:p-4 mb-6 border border-gray-200 dark:border-gray-700">
          <div className="flex flex-wrap gap-2 sm:gap-3 justify-center mb-4">
            {MODES.map((m) => (
              <button
                key={m.key}
                className={`flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-2 rounded-lg font-semibold border transition text-sm sm:text-base shadow-sm touch-optimized-button
                  ${mode === m.key ? "bg-blue-600 text-white border-blue-700" : "bg-white dark:bg-gray-800 text-blue-700 dark:text-blue-200 border-blue-200 dark:border-blue-700 hover:bg-blue-100 dark:hover:bg-gray-700"}`}
                title={m.label}
                onClick={() => setMode(m.key)}
              >
                <span>{m.icon}</span> {m.label}
                {m.key === "challenge" && (
                  <span className="ml-1 bg-yellow-400 text-yellow-900 text-xs px-2 py-0.5 rounded-full">
                    ‡¶®‡¶§‡ßÅ‡¶®
                  </span>
                )}
              </button>
            ))}
          </div>

          <div className="flex flex-wrap gap-2 sm:gap-3 justify-center">
            <button
              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-semibold border transition shadow-sm
                ${showCurrent ? "bg-green-600 text-white border-green-700" : "bg-white dark:bg-gray-800 text-green-700 dark:text-green-200 border-green-200 dark:border-green-700 hover:bg-green-100 dark:hover:bg-gray-700"}`}
              title="‡¶ï‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶¨‡¶æ‡¶π ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®"
              onClick={() => setShowCurrent((v) => !v)}
            >
              ‚ö° {showCurrent ? "‡¶ï‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®" : "‡¶ï‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßÅ‡¶ï‡¶æ‡¶®"}
            </button>

            <button
              className="flex items-center gap-2 px-4 py-2 rounded-lg font-semibold border border-red-400 bg-white dark:bg-gray-800 text-red-700 dark:text-red-200 hover:bg-red-50 dark:hover:bg-red-900/30 transition shadow-sm"
              title="‡¶∞‡¶ø‡¶∏‡ßá‡¶ü"
              onClick={handleReset}
            >
              ‚ôªÔ∏è ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
            </button>

            <button
              className="flex items-center gap-2 px-4 py-2 rounded-lg font-semibold border border-blue-400 bg-white dark:bg-gray-800 text-blue-700 dark:text-blue-200 hover:bg-blue-50 dark:hover:bg-blue-900/30 transition shadow-sm"
              title="‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£"
              onClick={handleSave}
            >
              üíæ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£
            </button>

            <button
              className="flex items-center gap-2 px-4 py-2 rounded-lg font-semibold border border-blue-400 bg-white dark:bg-gray-800 text-blue-700 dark:text-blue-200 hover:bg-blue-50 dark:hover:bg-blue-900/30 transition shadow-sm"
              title="‡¶≤‡ßã‡¶°"
              onClick={handleLoad}
            >
              üìÇ ‡¶≤‡ßã‡¶°
            </button>

            <button
              className="flex items-center gap-2 px-4 py-2 rounded-lg font-semibold border border-purple-400 bg-white dark:bg-gray-800 text-purple-700 dark:text-purple-200 hover:bg-purple-50 dark:hover:bg-purple-900/30 transition shadow-sm"
              title="‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü"
              onClick={handleExport}
            >
              üñºÔ∏è ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü
            </button>
          </div>

          {/* Parameter controls */}
          <div className="mt-4 flex flex-wrap gap-3 sm:gap-4 justify-center items-center">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                ‡¶≠‡ßã‡¶≤‡ßç‡¶ü‡ßá‡¶ú (V)
              </label>
              <div className="flex">
                <button
                  className="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded-l-md border border-gray-300 dark:border-gray-600"
                  onClick={() => setVoltage(Math.max(1, voltage - 1))}
                >
                  -
                </button>
                <input
                  className="w-16 text-center border-t border-b border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                  max="24"
                  min="1"
                  type="number"
                  value={voltage}
                  onChange={(e) => setVoltage(Number(e.target.value))}
                />
                <button
                  className="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded-r-md border border-gray-300 dark:border-gray-600"
                  onClick={() => setVoltage(Math.min(24, voltage + 1))}
                >
                  +
                </button>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ (Œ©)
              </label>
              <div className="flex">
                <button
                  className="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded-l-md border border-gray-300 dark:border-gray-600"
                  onClick={() => setResistance(Math.max(1, resistance - 5))}
                >
                  -
                </button>
                <input
                  className="w-16 text-center border-t border-b border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                  max="1000"
                  min="1"
                  type="number"
                  value={resistance}
                  onChange={(e) => setResistance(Number(e.target.value))}
                />
                <button
                  className="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded-r-md border border-gray-300 dark:border-gray-600"
                  onClick={() => setResistance(Math.min(1000, resistance + 5))}
                >
                  +
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Instructions with better design */}
        <div className="mb-6 flex items-center justify-center">
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/40 dark:to-indigo-900/40 border border-blue-200 dark:border-blue-800 rounded-lg px-6 py-4 flex items-center gap-4 shadow-sm max-w-2xl w-full">
            <span className="text-3xl hidden sm:block">üí°</span>
            <div>
              <h3 className="text-blue-800 dark:text-blue-300 font-bold mb-2">
                ‡¶ü‡¶ø‡¶™‡¶∏
              </h3>
              <ul className="text-gray-700 dark:text-gray-200 text-sm sm:text-base list-disc pl-4 space-y-1">
                <li>‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®</li>
                <li>‡¶°‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®</li>
                <li>‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡¶ø‡¶∏‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶ß‡¶∞‡ßá ‡¶ü‡¶æ‡¶®‡ßÅ‡¶®</li>
                <li>
                  <kbd className="px-1 py-0.5 bg-gray-200 dark:bg-gray-700 rounded text-sm">
                    R
                  </kbd>{" "}
                  ‡¶ö‡ßá‡¶™‡ßá ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶ò‡ßÅ‡¶∞‡¶æ‡¶®
                </li>
                <li>‡¶∏‡ßÅ‡¶á‡¶ö on/off ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®</li>
                <li>Alt ‡¶ö‡ßá‡¶™‡ßá ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Challenge selector with improved design */}
        {mode === "challenge" && (
          <div className="mb-6 flex flex-col items-center bg-gradient-to-r from-yellow-50 to-amber-50 dark:from-yellow-900/30 dark:to-amber-900/30 rounded-lg p-4 border border-yellow-200 dark:border-yellow-800 shadow-sm">
            <span className="mb-2 font-semibold text-yellow-700 dark:text-yellow-400 bg-yellow-100 dark:bg-yellow-900/60 px-3 py-1 rounded-full flex items-center gap-2 text-base">
              üèÜ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú ‡¶Æ‡ßã‡¶°
            </span>
            <select
              className="px-4 py-2 rounded-lg border border-yellow-400 bg-white dark:bg-gray-800 text-yellow-900 dark:text-yellow-200 font-semibold mb-2"
              value={CHALLENGES.findIndex(
                (c) => c.challenge === selectedChallenge,
              )}
              onChange={(e) =>
                setSelectedChallenge(
                  CHALLENGES[parseInt(e.target.value)].challenge,
                )
              }
            >
              {CHALLENGES.map((c, i) => (
                <option key={c.key} value={i}>
                  {c.label}
                </option>
              ))}
            </select>
            <div className="mt-2 text-yellow-800 dark:text-yellow-200 text-center font-medium">
              {selectedChallenge.description}
            </div>

            {challengeResult && (
              <div
                className={`mt-3 px-4 py-2 rounded-lg font-medium ${
                  challengeResult === "success"
                    ? "bg-green-100 dark:bg-green-900/60 text-green-800 dark:text-green-200"
                    : challengeResult === "warning"
                      ? "bg-orange-100 dark:bg-orange-900/60 text-orange-800 dark:text-orange-200"
                      : "bg-red-100 dark:bg-red-900/60 text-red-800 dark:text-red-200"
                }`}
              >
                {challengeResult === "success"
                  ? "üëè ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!"
                  : challengeResult === "warning"
                    ? "‚ö†Ô∏è ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶Ö‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£! ‡¶Ü‡¶∞‡¶ì ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
                    : "‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶ü ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶Ø‡¶º‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!"}
              </div>
            )}
          </div>
        )}

        {/* Simulator Card with improved design */}
        <div className="bg-white dark:bg-gray-900 rounded-2xl shadow-xl p-6 mb-8 border border-blue-100 dark:border-blue-800">
          <P5CircuitSimulator
            key={resetKey}
            challenge={mode === "challenge" ? selectedChallenge : undefined}
            mode={mode}
            resistance={resistance}
            showCurrent={showCurrent}
            showLabels={true}
            voltage={voltage}
            onChallengeResult={handleChallengeResult}
          />
        </div>
      </div>
    </DefaultLayout>
  );
}
